name: BigQuery Data Validation

on:
  # run on every push to main
  push:
    branches:
      - main

  # still validate on PRs that touch the workflow file
  pull_request:
    paths:
      - '.github/workflows/data-validation.yml'

  # allow manual “Run workflow” dispatch
  workflow_dispatch: {}


jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      # 1) Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Authenticate to GCP using your full-service-account JSON in a secret
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 3) Run the count query
        # 3) Run the count query
-  - name: Run validation query
-    run: |
-      # Execute COUNT in CSV mode, specifying project explicitly
-      bq \
-        --project_id=${{ env.GCP_PROJECT }} \
-        query \
-        --nouse_legacy_sql \
-        --format=csv \
-        'SELECT COUNT(*) AS row_count
-         FROM `neuralflow-e32ab.dns_logs.validation_test`;' \
-        > validation.csv
+  - name: Run validation query
+    run: |
+      # (A) force correct project, no need for GCP_PROJECT env var
+      bq --project_id=neuralflow-e32ab \
+         query \
+         --nouse_legacy_sql \
+         --format=csv \
+         'SELECT COUNT(*) AS row_count
+          FROM `neuralflow-e32ab.dns_logs.validation_test`;' \
+        > validation.csv
+
+      # (B) dump STDERR+STDOUT so we see BigQuery errors
+      echo "===== RAW BQ OUTPUT (CSV + ERRORS) ====="
+      cat validation.csv 2>&1 || true
+      echo "========================================"
+
+      # (C) parse out the numeric count (skip header)
+      ROWS=$(tail -n +2 validation.csv | head -1)
+      echo "Parsed ROWS=$ROWS"
+
+      # (D) fail if < 1
+      if [[ -z "$ROWS" || "$ROWS" -lt 1 ]]; then
+        echo "❌ No rows found in validation_test!"
+        exit 1
+      fi
+
+      # (E) success
+      echo "✅ Found $ROWS rows in validation_test."


          # 4) Dump raw BQ output for debugging
          echo "===== RAW BQ OUTPUT (CSV) ====="
          cat validation.csv || true
          echo "==============================="

          # 5) Parse out the numeric count (skip header)
          ROWS=$(tail -n +2 validation.csv | head -1)
          echo "Parsed ROWS=$ROWS"

          # 6) Fail if < 1
          if [[ -z "$ROWS" || "$ROWS" -lt 1 ]]; then
            echo "❌ No rows found in validation_test!"
            exit 1
          fi

          # 7) Success
          echo "✅ Found $ROWS rows in validation_test."
